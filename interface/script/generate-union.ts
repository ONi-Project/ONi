import { Project, SyntaxKind } from "ts-morph"

const project = new Project()

let output = ""

output +=
    `/* The file is generated by generate-union.ts. DO NOT EDIT MANUALLY! */

import type * as serverToWeb from "../ws/server-to-web.types"
import type * as webToServer from "../ws/web-to-server.types"
import type * as serverToOc from "../ws/server-to-oc.types"
import type * as ocToServer from "../ws/oc-to-server.types"

`

const source1 = project.addSourceFileAtPath("./ws/server-to-web.types.ts")
const exportedTypeAliases1 = source1.getTypeAliases().filter(typeAlias => typeAlias.isExported())
const unionType1 = exportedTypeAliases1.map(t => `serverToWeb.${t.getName()}`).join("\n    | ")
output += `export type ServerToWeb = \n    | ${unionType1}\n\n`

const source2 = project.addSourceFileAtPath("./ws/web-to-server.types.ts")
const exportedTypeAliases2 = source2.getTypeAliases().filter(typeAlias => typeAlias.isExported())
const unionType2 = exportedTypeAliases2.map(t => `webToServer.${t.getName()}`).join("\n    | ")
output += `export type WebToServer = \n    | ${unionType2}\n\n`

const source3 = project.addSourceFileAtPath("./ws/server-to-oc.types.ts")
const exportedTypeAliases3 = source3.getTypeAliases().filter(typeAlias => typeAlias.isExported())
const unionType3 = exportedTypeAliases3.map(t => `serverToOc.${t.getName()}`).join("\n    | ")
output += `export type ServerToOc = \n    | ${unionType3}\n\n`

const source4 = project.addSourceFileAtPath("./ws/oc-to-server.types.ts")
const exportedTypeAliases4 = source4.getTypeAliases().filter(typeAlias => typeAlias.isExported())
const unionType4 = exportedTypeAliases4.map(t => `ocToServer.${t.getName()}`).join("\n    | ")
output += `export type OcToServer = \n    | ${unionType4}\n\n`

output +=
    `export type All =
    | ServerToWeb
    | WebToServer
    | ServerToOc
    | OcToServer
`

console.log(output)

const outputSource = project.createSourceFile("./utils/union.types.ts", output, { overwrite: true })
outputSource.saveSync()